apply plugin: 'scala'
apply plugin: "edu.sc.seis.launch4j"
apply plugin: 'com.github.johnrengelman.shadow'

ext {
  mainClassName = 'com.netflix.monix.grpc.codegen.GrpcCodeGenerator' 
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [ "-Ywarn-unused:imports", "-language:dynamics" ]
}

dependencies {
    compile 'org.scala-lang:scala-library:2.13.3'

    // Scala dependencies
    implementation 'com.thesamet.scalapb:compilerplugin_2.13:0.10.8'

    // Test Scala dependencies
    testCompile 'org.scalameta:munit_2.13:0.7.7'
}

jar.enabled = false

task buildArtifacts(type: Copy) {
    from(buildDir) {
        rename 'protoc-gen-monix-grpc$', '$0-osx-x86_64.exe'
    }
    from(buildDir) {
        rename 'protoc-gen-monix-grpc$', '$0-linux-x86_64.exe'
    }
    into "$buildDir/archives"
}

def osxExeFile = file("$buildDir/archives/protoc-gen-monix-grpc-osx-x86_64.exe")
def osxArtifact = artifacts.add('archives', osxExeFile) {
    name "protoc-gen-monix-grpc"
    type "exe"
    extension "exe"
    classifier "osx-x86_64"
    builtBy buildArtifacts
}

def linuxExeFile = file("$buildDir/archives/protoc-gen-monix-grpc-linux-x86_64.exe")
def linuxArtifact = artifacts.add('archives', linuxExeFile) {
    name "protoc-gen-monix-grpc"
    type "exe"
    extension "exe"
    classifier "linux-x86_64"
    builtBy buildArtifacts
}

def windowsExeFile = file("$buildDir/archives/protoc-gen-monix-grpc-windows-x86_64.exe")
def windowsArtifact = artifacts.add('archives', windowsExeFile) {
    name "protoc-gen-monix-grpc"
    type "exe"
    extension "exe"
    classifier "windows-x86_64"
    builtBy createExe
}

shadowJar {
    mergeServiceFiles()

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    manifest {
        attributes("Main-Class": mainClassName, "Implementation-Version": version)
    }

    archiveName = "protoc-gen-monix-grpc"
    destinationDir = buildDir
}

launch4j {
    outfile = "protoc-gen-monix-grpc-windows-x86_64.exe"
    mainClassName = mainClassName
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "lib/${project.tasks.shadowJar.archiveName}"
    outputDir = "archives"
}

task prependShellStub() {
    doLast {
        def stub = file("stub.sh")
        def plugin = new File("${buildDir}/protoc-gen-monix-grpc")
        def tempScript = new File("${buildDir}/protoc-gen-monix-grpc.stubbed")

        tempScript.write('') // truncate output if needed
        tempScript << stub.text.normalize() // remove carriage returns
        tempScript << plugin.bytes
        plugin.delete()
        tempScript.renameTo(plugin)
        plugin.setExecutable(true)
    }
}

task createProperties(type: WriteProperties, dependsOn: processResources) {
  outputFile = file("$buildDir/resources/main/version.properties")
  property 'version', project.version.toString()
}

classes.dependsOn(createProperties)
prependShellStub.dependsOn(shadowJar)
buildArtifacts.dependsOn(shadowJar)
buildArtifacts.dependsOn(createExe)
buildArtifacts.dependsOn(prependShellStub)

publishing {
    publications {
        maven(MavenPublication) {
            artifact osxArtifact
            artifact linuxArtifact
            artifact windowsArtifact
        }
    }
}
