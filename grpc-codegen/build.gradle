apply plugin: 'scala'
apply plugin: 'application'
apply plugin: "edu.sc.seis.launch4j"
apply plugin: 'com.github.johnrengelman.shadow'

applicationName = 'protoc-gen-monix-grpc'
mainClassName = 'com.netflix.monix.grpc.codegen.GrpcCodeGenerator' 

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [ "-Ywarn-unused:imports", "-language:dynamics" ]
}

dependencies {
    compile 'org.scala-lang:scala-library:2.13.3'

    // Scala dependencies
    implementation 'com.thesamet.scalapb:compilerplugin_2.13:0.10.8'

    // Test Scala dependencies
    testCompile 'org.scalameta:munit_2.13:0.7.7'
}

task buildArtifacts(type: Copy) {
    from(buildDir) {
        rename 'protoc-gen-monix-grpc$', '$0-osx-x86_64.exe'
    }
    from(buildDir) {
        rename 'protoc-gen-monix-grpc$', '$0-linux-x86_64.exe'
    }
    into "$buildDir/archives"
}

artifacts {
    archives("$buildDir/archives/protoc-gen-monix-grpc-osx-x86_64.exe" as File) {
        name "protoc-gen-monix-grpc"
        classifier "osx-x86_64"
        type "exe"
        extension "exe"
        builtBy buildArtifacts
    }
    archives("$buildDir/archives/protoc-gen-monix-grpc-linux-x86_64.exe" as File) {
        name "protoc-gen-monix-grpc"
        classifier "linux-x86_64"
        type "exe"
        extension "exe"
        builtBy buildArtifacts
    }
    archives("$buildDir/archives/protoc-gen-monix-grpc-windows-x86_64.exe" as File) {
        name "protoc-gen-monix-grpc"
        classifier "windows-x86_64"
        type "exe"
        extension "exe"
        builtBy createExe
    }
}

shadowJar {
    mergeServiceFiles()

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    manifest {
        attributes("Main-Class": mainClassName, "Implementation-Version": version)
    }

    archiveName = "protoc-gen-monix-grpc"
    destinationDir = buildDir
}

launch4j {
    outfile = "protoc-gen-monix-grpc-windows-x86_64.exe"
    mainClassName = project.mainClassName
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "lib/${project.tasks.shadowJar.archiveName}"
    outputDir = "archives"
}

task prependShellStub() {
    doLast {
        def stub = file("stub.sh")
        def plugin = new File("${buildDir}/protoc-gen-monix-grpc")
        def tempScript = new File("${buildDir}/protoc-gen-monix-grpc.stubbed")

        tempScript.write('') // truncate output if needed
        tempScript << stub.text.normalize() // remove carriage returns
        tempScript << plugin.bytes
        plugin.delete()
        tempScript.renameTo(plugin)
        plugin.setExecutable(true)
    }
}

prependShellStub.dependsOn(shadowJar)
buildArtifacts.dependsOn(shadowJar)
buildArtifacts.dependsOn(createExe)
buildArtifacts.dependsOn(prependShellStub)
build.dependsOn(buildArtifacts)